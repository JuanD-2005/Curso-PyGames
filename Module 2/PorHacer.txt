1. Manejo de im√°genes o sprites

Concepto y utilidad
- Definici√≥n: Un sprite es una imagen 2D que representa un objeto del juego (personaje, enemigo, √≠tem, fondo).
- En Pygame: Las im√°genes se cargan como objetos Surface y se dibujan sobre la ventana con blit.
- Uso t√≠pico: Mostrar personajes, animar estados, detectar colisiones con Rect, y organizar capas (fondo, objetos, HUD).

------------------------------------------------------

Formatos y organizaci√≥n de archivos
- Formatos recomendados: PNG (transparencia), JPG (fondos sin transparencias), BMP (simple).
- Estructura de proyecto:
- Coloca las im√°genes en una carpeta como assets/ o img/ para mantener orden.
- Usa rutas relativas para portabilidad.
mi_juego/
 ‚îú‚îÄ main.py
 ‚îî‚îÄ assets/
    ‚îú‚îÄ jugador.png
    ‚îî‚îÄ moneda.png

------------------------------------------------------

Carga de sprites y dibujo en la pantalla
- Cargar una imagen: pygame.image.load(ruta) devuelve una Surface.
- Dibujar en pantalla: ventana.blit(surface, (x, y)) coloca la imagen en coordenadas.

import pygame

pygame.init()
ventana = pygame.display.set_mode((600, 400))
pygame.display.set_caption("Sprites en Pygame")

# Carga del sprite (usa rutas correctas)
jugador_img = pygame.image.load("assets/jugador.png")  # Surface

ejecutando = True
while ejecutando:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            ejecutando = False

    ventana.fill((30, 30, 30))  # Fondo
    ventana.blit(jugador_img, (100, 150))  # Dibujo del sprite
    pygame.display.update()

pygame.quit()

------------------------------------------------------

Tama√±o, escalado y rotaci√≥n
- Escalar: Ajusta el tama√±o para adaptarlo al juego.
- Rotar: Gira el sprite para direcciones o efectos.

# Escalar a 64x64
jugador_peq = pygame.transform.scale(jugador_img, (64, 64))

# Rotar 90 grados
jugador_rot = pygame.transform.rotate(jugador_img, 90)

# Escalado proporcional (por factor)
factor = 1.5
w, h = jugador_img.get_size()
jugador_grande = pygame.transform.scale(jugador_img, (int(w*factor), int(h*factor)))

------------------------------------------------------

M√°s rendimiento: convertir superficies
- convert(): Convierte la Surface al formato de la pantalla para dibujar m√°s r√°pido.
- convert_alpha(): Igual, pero mantiene la transparencia (canal alpha).

jugador_img = pygame.image.load("assets/jugador.png").convert_alpha()
fondo_img = pygame.image.load("assets/fondo.jpg").convert()

------------------------------------------------------

Transparencia y color clave
- PNG con alpha: Usar convert_alpha para respetar transparencias.
- Color key: Define un color a ‚Äúeliminar‚Äù (hacer transparente) si el formato no tiene alpha.

sprite = pygame.image.load("assets/enemigo.bmp").convert()
sprite.set_colorkey((255, 0, 255))  # Magenta se vuelve transparente

------------------------------------------------------

Posicionamiento con Rect y colisiones b√°sicas
- Rect: Objeto que almacena posici√≥n y tama√±o, √∫til para mover y detectar colisiones.
- Inicializaci√≥n: get_rect crea un Rect del tama√±o de la Surface.

jugador_img = pygame.image.load("assets/jugador.png").convert_alpha()
jugador_rect = jugador_img.get_rect()
jugador_rect.topleft = (100, 150)

moneda_img = pygame.image.load("assets/moneda.png").convert_alpha()
moneda_rect = moneda_img.get_rect()
moneda_rect.center = (300, 200)

# Dibujo y colisi√≥n
ventana.blit(jugador_img, jugador_rect)
ventana.blit(moneda_img, moneda_rect)

if jugador_rect.colliderect(moneda_rect):
    print("¬°Recogiste la moneda!")

------------------------------------------------------

Gesti√≥n de errores y rutas robustas
- Validar carga: Maneja errores si la imagen no existe.
- Rutas portables: Usa os.path para construir rutas fiables.

import os, pygame
base = os.path.dirname(__file__)
ruta_jugador = os.path.join(base, "assets", "jugador.png")

try:
    jugador_img = pygame.image.load(ruta_jugador).convert_alpha()
except pygame.error as e:
    print("Error cargando imagen:", e)
    pygame.quit()
    raise

------------------------------------------------------

Buenas pr√°cticas
- Nombres descriptivos: jugador_img, enemigo_rect, fondo_img.
- Pre-carga: Carga todas las im√°genes al iniciar, evita cargar dentro del bucle principal.
- Atlas de sprites: Agrupa m√∫ltiples frames en una sola imagen para animaciones, rec√≥rtalos con subsurfaces o Rects.
- Resoluci√≥n coherente: Mant√©n tama√±os consistentes para evitar escalados frecuentes.

------------------------------------------------------

Mini-ejercicio
- Objetivo: Mostrar un personaje y una moneda, detectar colisi√≥n.
- Pasos:
- Cargar: jugador.png y moneda.png desde assets/.
- Posicionar: jugador_rect.topleft = (50, 50), moneda_rect.center = (250, 150).
- Dibujar: blit ambos y actualizar cada frame.
- Probar colisi√≥n: Si colliderect, imprimir ‚Äú¬°Moneda recogida!‚Äù y mover la moneda fuera de pantalla.

--------------------------------------------------------------------------------------------------------------------------

2. Sistema de Coordenadas en Pygame

Concepto b√°sico
- En Pygame, la pantalla se organiza con un sistema de coordenadas en 2D.
- El origen (0,0) est√° en la esquina superior izquierda de la ventana.
- El eje X crece hacia la derecha.
- El eje Y crece hacia abajo.
üëâ Esto es diferente a la geometr√≠a tradicional, donde el eje Y crece hacia arriba.

------------------------------------------------------

Representaci√≥n visual
(0,0) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ñ∫ X
   ‚îÇ
   ‚îÇ
   ‚ñº
   Y

Ejemplo en una ventana de 600x400 p√≠xeles:
- La esquina superior izquierda es (0,0).
- La esquina superior derecha es (600,0).
- La esquina inferior izquierda es (0,400).
- La esquina inferior derecha es (600,400).

--------------------------------------------------------------------------------------------------------------------------

3. Posicionamiento de elementos, Movimiento B√°sico y Manejo de Eventos Avanzado

Posicionamiento de elementos
- En Pygame, cada objeto (imagen, sprite, rect√°ngulo) se coloca en la ventana usando coordenadas (x, y).
- Por defecto, esas coordenadas indican la esquina superior izquierda del objeto.
- Para facilitar el control, se usan los objetos Rect, que guardan posici√≥n y tama√±o.

Ejemplo:
jugador = pygame.image.load("assets/jugador.png").convert_alpha()
jugador_rect = jugador.get_rect()
jugador_rect.topleft = (100, 150)  # Posici√≥n inicial

üëâ Con Rect puedes usar atributos como:
- topleft, topright, center, bottomleft ‚Üí para ubicar el sprite.
- x, y ‚Üí coordenadas.
- move_ip(dx, dy) ‚Üí mover el rect√°ngulo en el lugar.

------------------------------------------------------

Movimiento b√°sico

El movimiento se logra cambiando las coordenadas del objeto en cada iteraci√≥n del bucle principal.
Movimiento autom√°tico

x, y = 50, 50
velocidad = 5

while ejecutando:
    x += velocidad  # Se mueve hacia la derecha
    ventana.fill((0,0,0))
    ventana.blit(jugador, (x, y))
    pygame.display.update()


Movimiento con teclado
velocidad = 5
x, y = 100, 100

while ejecutando:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            ejecutando = False

    teclas = pygame.key.get_pressed()
    if teclas[pygame.K_LEFT]:
        x -= velocidad
    if teclas[pygame.K_RIGHT]:
        x += velocidad
    if teclas[pygame.K_UP]:
        y -= velocidad
    if teclas[pygame.K_DOWN]:
        y += velocidad

    ventana.fill((0,0,0))
    ventana.blit(jugador, (x, y))
    pygame.display.update()

üëâ Aqu√≠ el jugador se mueve con las flechas del teclado.

------------------------------------------------------

Manejo de eventos avanzado

Pygame maneja todos los eventos (teclado, rat√≥n, joystick, cierre de ventana) en una cola de eventos.
Esto permite crear interacciones m√°s complejas.
Eventos comunes
- pygame.KEYDOWN ‚Üí cuando se presiona una tecla.
- pygame.KEYUP ‚Üí cuando se suelta una tecla.
- pygame.MOUSEBUTTONDOWN ‚Üí clic del rat√≥n.
- pygame.MOUSEMOTION ‚Üí movimiento del rat√≥n.

Ejemplo:
for event in pygame.event.get():
    if event.type == pygame.QUIT:
        ejecutando = False
    elif event.type == pygame.KEYDOWN:
        if event.key == pygame.K_SPACE:
            print("¬°Salto!")
    elif event.type == pygame.KEYUP:
        print("Tecla liberada:", event.key)
    elif event.type == pygame.MOUSEBUTTONDOWN:
        print("Clic en:", event.pos)
    elif event.type == pygame.MOUSEMOTION:
        print("El rat√≥n se mueve en:", event.pos)

üëâ Con esto puedes detectar acciones espec√≠ficas (ej. saltar con espacio, disparar con clic, mover c√°mara con rat√≥n).

------------------------------------------------------

Resumen para diapositivas
- Posicionamiento ‚Üí se hace con coordenadas (x, y) o con Rect.
- Movimiento b√°sico ‚Üí cambiar coordenadas en cada frame (autom√°tico o con teclado).
- Eventos avanzados ‚Üí permiten interacci√≥n real: teclado, rat√≥n, joystick.
